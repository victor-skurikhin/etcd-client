// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/etcd_client_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EtcdClientService_Delete_FullMethodName = "/proto.EtcdClientService/Delete"
	EtcdClientService_Get_FullMethodName    = "/proto.EtcdClientService/Get"
	EtcdClientService_Put_FullMethodName    = "/proto.EtcdClientService/Put"
)

// EtcdClientServiceClient is the client API for EtcdClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EtcdClientServiceClient interface {
	Delete(ctx context.Context, in *EtcdClientRequest, opts ...grpc.CallOption) (*EtcdClientResponse, error)
	Get(ctx context.Context, in *EtcdClientRequest, opts ...grpc.CallOption) (*EtcdClientResponse, error)
	Put(ctx context.Context, in *EtcdClientRequest, opts ...grpc.CallOption) (*EtcdClientResponse, error)
}

type etcdClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEtcdClientServiceClient(cc grpc.ClientConnInterface) EtcdClientServiceClient {
	return &etcdClientServiceClient{cc}
}

func (c *etcdClientServiceClient) Delete(ctx context.Context, in *EtcdClientRequest, opts ...grpc.CallOption) (*EtcdClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EtcdClientResponse)
	err := c.cc.Invoke(ctx, EtcdClientService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdClientServiceClient) Get(ctx context.Context, in *EtcdClientRequest, opts ...grpc.CallOption) (*EtcdClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EtcdClientResponse)
	err := c.cc.Invoke(ctx, EtcdClientService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdClientServiceClient) Put(ctx context.Context, in *EtcdClientRequest, opts ...grpc.CallOption) (*EtcdClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EtcdClientResponse)
	err := c.cc.Invoke(ctx, EtcdClientService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EtcdClientServiceServer is the server API for EtcdClientService service.
// All implementations must embed UnimplementedEtcdClientServiceServer
// for forward compatibility
type EtcdClientServiceServer interface {
	Delete(context.Context, *EtcdClientRequest) (*EtcdClientResponse, error)
	Get(context.Context, *EtcdClientRequest) (*EtcdClientResponse, error)
	Put(context.Context, *EtcdClientRequest) (*EtcdClientResponse, error)
	mustEmbedUnimplementedEtcdClientServiceServer()
}

// UnimplementedEtcdClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEtcdClientServiceServer struct {
}

func (UnimplementedEtcdClientServiceServer) Delete(context.Context, *EtcdClientRequest) (*EtcdClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEtcdClientServiceServer) Get(context.Context, *EtcdClientRequest) (*EtcdClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEtcdClientServiceServer) Put(context.Context, *EtcdClientRequest) (*EtcdClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedEtcdClientServiceServer) mustEmbedUnimplementedEtcdClientServiceServer() {}

// UnsafeEtcdClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EtcdClientServiceServer will
// result in compilation errors.
type UnsafeEtcdClientServiceServer interface {
	mustEmbedUnimplementedEtcdClientServiceServer()
}

func RegisterEtcdClientServiceServer(s grpc.ServiceRegistrar, srv EtcdClientServiceServer) {
	s.RegisterService(&EtcdClientService_ServiceDesc, srv)
}

func _EtcdClientService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EtcdClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdClientServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EtcdClientService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdClientServiceServer).Delete(ctx, req.(*EtcdClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdClientService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EtcdClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdClientServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EtcdClientService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdClientServiceServer).Get(ctx, req.(*EtcdClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdClientService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EtcdClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdClientServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EtcdClientService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdClientServiceServer).Put(ctx, req.(*EtcdClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EtcdClientService_ServiceDesc is the grpc.ServiceDesc for EtcdClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EtcdClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EtcdClientService",
	HandlerType: (*EtcdClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _EtcdClientService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EtcdClientService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _EtcdClientService_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/etcd_client_service.proto",
}
